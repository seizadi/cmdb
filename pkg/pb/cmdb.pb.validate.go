// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: github.com/seizadi/cmdb/pkg/pb/cmdb.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _cmdb_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on VersionResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *VersionResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Version

	return nil
}

// VersionResponseValidationError is the validation error returned by
// VersionResponse.Validate if the designated constraints aren't met.
type VersionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VersionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VersionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VersionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VersionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VersionResponseValidationError) ErrorName() string { return "VersionResponseValidationError" }

// Error satisfies the builtin error interface
func (e VersionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVersionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VersionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VersionResponseValidationError{}

// Validate checks the field values on CloudProvider with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CloudProvider) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloudProviderValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Provider

	// no validation rules for Account

	for idx, item := range m.GetRegions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CloudProviderValidationError{
					field:  fmt.Sprintf("Regions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CloudProviderValidationError is the validation error returned by
// CloudProvider.Validate if the designated constraints aren't met.
type CloudProviderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudProviderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudProviderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudProviderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudProviderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudProviderValidationError) ErrorName() string { return "CloudProviderValidationError" }

// Error satisfies the builtin error interface
func (e CloudProviderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudProvider.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudProviderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudProviderValidationError{}

// Validate checks the field values on CreateCloudProviderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateCloudProviderRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCloudProviderRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateCloudProviderRequestValidationError is the validation error returned
// by CreateCloudProviderRequest.Validate if the designated constraints aren't met.
type CreateCloudProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCloudProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCloudProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCloudProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCloudProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCloudProviderRequestValidationError) ErrorName() string {
	return "CreateCloudProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCloudProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCloudProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCloudProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCloudProviderRequestValidationError{}

// Validate checks the field values on CreateCloudProviderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateCloudProviderResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCloudProviderResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateCloudProviderResponseValidationError is the validation error returned
// by CreateCloudProviderResponse.Validate if the designated constraints
// aren't met.
type CreateCloudProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCloudProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCloudProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCloudProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCloudProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCloudProviderResponseValidationError) ErrorName() string {
	return "CreateCloudProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCloudProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCloudProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCloudProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCloudProviderResponseValidationError{}

// Validate checks the field values on ReadCloudProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadCloudProviderRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadCloudProviderRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadCloudProviderRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadCloudProviderRequestValidationError is the validation error returned by
// ReadCloudProviderRequest.Validate if the designated constraints aren't met.
type ReadCloudProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadCloudProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadCloudProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadCloudProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadCloudProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadCloudProviderRequestValidationError) ErrorName() string {
	return "ReadCloudProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadCloudProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadCloudProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadCloudProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadCloudProviderRequestValidationError{}

// Validate checks the field values on ReadCloudProviderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadCloudProviderResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadCloudProviderResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadCloudProviderResponseValidationError is the validation error returned by
// ReadCloudProviderResponse.Validate if the designated constraints aren't met.
type ReadCloudProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadCloudProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadCloudProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadCloudProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadCloudProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadCloudProviderResponseValidationError) ErrorName() string {
	return "ReadCloudProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadCloudProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadCloudProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadCloudProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadCloudProviderResponseValidationError{}

// Validate checks the field values on UpdateCloudProviderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateCloudProviderRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCloudProviderRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCloudProviderRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateCloudProviderRequestValidationError is the validation error returned
// by UpdateCloudProviderRequest.Validate if the designated constraints aren't met.
type UpdateCloudProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCloudProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCloudProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCloudProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCloudProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCloudProviderRequestValidationError) ErrorName() string {
	return "UpdateCloudProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCloudProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCloudProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCloudProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCloudProviderRequestValidationError{}

// Validate checks the field values on UpdateCloudProviderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateCloudProviderResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCloudProviderResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateCloudProviderResponseValidationError is the validation error returned
// by UpdateCloudProviderResponse.Validate if the designated constraints
// aren't met.
type UpdateCloudProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCloudProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCloudProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCloudProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCloudProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCloudProviderResponseValidationError) ErrorName() string {
	return "UpdateCloudProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCloudProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCloudProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCloudProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCloudProviderResponseValidationError{}

// Validate checks the field values on DeleteCloudProviderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteCloudProviderRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteCloudProviderRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeleteCloudProviderRequestValidationError is the validation error returned
// by DeleteCloudProviderRequest.Validate if the designated constraints aren't met.
type DeleteCloudProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCloudProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCloudProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCloudProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCloudProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCloudProviderRequestValidationError) ErrorName() string {
	return "DeleteCloudProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCloudProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCloudProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCloudProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCloudProviderRequestValidationError{}

// Validate checks the field values on DeleteCloudProviderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteCloudProviderResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteCloudProviderResponseValidationError is the validation error returned
// by DeleteCloudProviderResponse.Validate if the designated constraints
// aren't met.
type DeleteCloudProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCloudProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCloudProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCloudProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCloudProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCloudProviderResponseValidationError) ErrorName() string {
	return "DeleteCloudProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCloudProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCloudProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCloudProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCloudProviderResponseValidationError{}

// Validate checks the field values on ListCloudProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCloudProviderRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCloudProviderRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOrderBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCloudProviderRequestValidationError{
				field:  "OrderBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCloudProviderRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCloudProviderRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListCloudProviderRequestValidationError is the validation error returned by
// ListCloudProviderRequest.Validate if the designated constraints aren't met.
type ListCloudProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudProviderRequestValidationError) ErrorName() string {
	return "ListCloudProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudProviderRequestValidationError{}

// Validate checks the field values on ListCloudProvidersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCloudProvidersResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCloudProvidersResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCloudProvidersResponseValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListCloudProvidersResponseValidationError is the validation error returned
// by ListCloudProvidersResponse.Validate if the designated constraints aren't met.
type ListCloudProvidersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCloudProvidersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCloudProvidersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCloudProvidersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCloudProvidersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCloudProvidersResponseValidationError) ErrorName() string {
	return "ListCloudProvidersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCloudProvidersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCloudProvidersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCloudProvidersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCloudProvidersResponseValidationError{}

// Validate checks the field values on Region with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Region) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegionValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Description

	for idx, item := range m.GetNetworks() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RegionValidationError{
					field:  fmt.Sprintf("Networks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetCloudProviderId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegionValidationError{
				field:  "CloudProviderId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RegionValidationError is the validation error returned by Region.Validate if
// the designated constraints aren't met.
type RegionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegionValidationError) ErrorName() string { return "RegionValidationError" }

// Error satisfies the builtin error interface
func (e RegionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegionValidationError{}

// Validate checks the field values on CreateRegionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateRegionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRegionRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateRegionRequestValidationError is the validation error returned by
// CreateRegionRequest.Validate if the designated constraints aren't met.
type CreateRegionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRegionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRegionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRegionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRegionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRegionRequestValidationError) ErrorName() string {
	return "CreateRegionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRegionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRegionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRegionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRegionRequestValidationError{}

// Validate checks the field values on CreateRegionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateRegionResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRegionResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateRegionResponseValidationError is the validation error returned by
// CreateRegionResponse.Validate if the designated constraints aren't met.
type CreateRegionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRegionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRegionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRegionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRegionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRegionResponseValidationError) ErrorName() string {
	return "CreateRegionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRegionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRegionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRegionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRegionResponseValidationError{}

// Validate checks the field values on ReadRegionRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ReadRegionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadRegionRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadRegionRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadRegionRequestValidationError is the validation error returned by
// ReadRegionRequest.Validate if the designated constraints aren't met.
type ReadRegionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadRegionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadRegionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadRegionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadRegionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadRegionRequestValidationError) ErrorName() string {
	return "ReadRegionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadRegionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadRegionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadRegionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadRegionRequestValidationError{}

// Validate checks the field values on ReadRegionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadRegionResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadRegionResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadRegionResponseValidationError is the validation error returned by
// ReadRegionResponse.Validate if the designated constraints aren't met.
type ReadRegionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadRegionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadRegionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadRegionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadRegionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadRegionResponseValidationError) ErrorName() string {
	return "ReadRegionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadRegionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadRegionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadRegionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadRegionResponseValidationError{}

// Validate checks the field values on UpdateRegionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateRegionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRegionRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRegionRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateRegionRequestValidationError is the validation error returned by
// UpdateRegionRequest.Validate if the designated constraints aren't met.
type UpdateRegionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRegionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRegionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRegionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRegionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRegionRequestValidationError) ErrorName() string {
	return "UpdateRegionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRegionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRegionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRegionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRegionRequestValidationError{}

// Validate checks the field values on UpdateRegionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateRegionResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRegionResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateRegionResponseValidationError is the validation error returned by
// UpdateRegionResponse.Validate if the designated constraints aren't met.
type UpdateRegionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRegionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRegionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRegionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRegionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRegionResponseValidationError) ErrorName() string {
	return "UpdateRegionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRegionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRegionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRegionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRegionResponseValidationError{}

// Validate checks the field values on DeleteRegionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteRegionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteRegionRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeleteRegionRequestValidationError is the validation error returned by
// DeleteRegionRequest.Validate if the designated constraints aren't met.
type DeleteRegionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRegionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRegionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRegionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRegionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRegionRequestValidationError) ErrorName() string {
	return "DeleteRegionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRegionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRegionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRegionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRegionRequestValidationError{}

// Validate checks the field values on DeleteRegionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteRegionResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteRegionResponseValidationError is the validation error returned by
// DeleteRegionResponse.Validate if the designated constraints aren't met.
type DeleteRegionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRegionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRegionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRegionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRegionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRegionResponseValidationError) ErrorName() string {
	return "DeleteRegionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRegionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRegionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRegionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRegionResponseValidationError{}

// Validate checks the field values on ListRegionRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListRegionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRegionRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOrderBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRegionRequestValidationError{
				field:  "OrderBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRegionRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRegionRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListRegionRequestValidationError is the validation error returned by
// ListRegionRequest.Validate if the designated constraints aren't met.
type ListRegionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRegionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRegionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRegionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRegionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRegionRequestValidationError) ErrorName() string {
	return "ListRegionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRegionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRegionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRegionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRegionRequestValidationError{}

// Validate checks the field values on ListRegionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListRegionsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRegionsResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRegionsResponseValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListRegionsResponseValidationError is the validation error returned by
// ListRegionsResponse.Validate if the designated constraints aren't met.
type ListRegionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRegionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRegionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRegionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRegionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRegionsResponseValidationError) ErrorName() string {
	return "ListRegionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRegionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRegionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRegionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRegionsResponseValidationError{}

// Validate checks the field values on Network with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Network) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NetworkValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Description

	if v, ok := interface{}(m.GetRegionId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NetworkValidationError{
				field:  "RegionId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// NetworkValidationError is the validation error returned by Network.Validate
// if the designated constraints aren't met.
type NetworkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NetworkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NetworkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NetworkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkValidationError) ErrorName() string { return "NetworkValidationError" }

// Error satisfies the builtin error interface
func (e NetworkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetwork.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkValidationError{}

// Validate checks the field values on CreateNetworkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateNetworkRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNetworkRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateNetworkRequestValidationError is the validation error returned by
// CreateNetworkRequest.Validate if the designated constraints aren't met.
type CreateNetworkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNetworkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNetworkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNetworkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNetworkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNetworkRequestValidationError) ErrorName() string {
	return "CreateNetworkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNetworkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNetworkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNetworkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNetworkRequestValidationError{}

// Validate checks the field values on CreateNetworkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateNetworkResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNetworkResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateNetworkResponseValidationError is the validation error returned by
// CreateNetworkResponse.Validate if the designated constraints aren't met.
type CreateNetworkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNetworkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNetworkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNetworkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNetworkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNetworkResponseValidationError) ErrorName() string {
	return "CreateNetworkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNetworkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNetworkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNetworkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNetworkResponseValidationError{}

// Validate checks the field values on ReadNetworkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadNetworkRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadNetworkRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadNetworkRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadNetworkRequestValidationError is the validation error returned by
// ReadNetworkRequest.Validate if the designated constraints aren't met.
type ReadNetworkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadNetworkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadNetworkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadNetworkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadNetworkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadNetworkRequestValidationError) ErrorName() string {
	return "ReadNetworkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadNetworkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadNetworkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadNetworkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadNetworkRequestValidationError{}

// Validate checks the field values on ReadNetworkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadNetworkResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadNetworkResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadNetworkResponseValidationError is the validation error returned by
// ReadNetworkResponse.Validate if the designated constraints aren't met.
type ReadNetworkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadNetworkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadNetworkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadNetworkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadNetworkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadNetworkResponseValidationError) ErrorName() string {
	return "ReadNetworkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadNetworkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadNetworkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadNetworkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadNetworkResponseValidationError{}

// Validate checks the field values on UpdateNetworkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateNetworkRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNetworkRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNetworkRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateNetworkRequestValidationError is the validation error returned by
// UpdateNetworkRequest.Validate if the designated constraints aren't met.
type UpdateNetworkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNetworkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNetworkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNetworkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNetworkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNetworkRequestValidationError) ErrorName() string {
	return "UpdateNetworkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNetworkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNetworkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNetworkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNetworkRequestValidationError{}

// Validate checks the field values on UpdateNetworkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateNetworkResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNetworkResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateNetworkResponseValidationError is the validation error returned by
// UpdateNetworkResponse.Validate if the designated constraints aren't met.
type UpdateNetworkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNetworkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNetworkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNetworkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNetworkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNetworkResponseValidationError) ErrorName() string {
	return "UpdateNetworkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNetworkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNetworkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNetworkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNetworkResponseValidationError{}

// Validate checks the field values on DeleteNetworkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteNetworkRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteNetworkRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeleteNetworkRequestValidationError is the validation error returned by
// DeleteNetworkRequest.Validate if the designated constraints aren't met.
type DeleteNetworkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNetworkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNetworkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNetworkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNetworkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNetworkRequestValidationError) ErrorName() string {
	return "DeleteNetworkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNetworkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNetworkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNetworkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNetworkRequestValidationError{}

// Validate checks the field values on DeleteNetworkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteNetworkResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteNetworkResponseValidationError is the validation error returned by
// DeleteNetworkResponse.Validate if the designated constraints aren't met.
type DeleteNetworkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNetworkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNetworkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNetworkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNetworkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNetworkResponseValidationError) ErrorName() string {
	return "DeleteNetworkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNetworkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNetworkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNetworkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNetworkResponseValidationError{}

// Validate checks the field values on ListNetworkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListNetworkRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListNetworkRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOrderBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListNetworkRequestValidationError{
				field:  "OrderBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListNetworkRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListNetworkRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListNetworkRequestValidationError is the validation error returned by
// ListNetworkRequest.Validate if the designated constraints aren't met.
type ListNetworkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNetworkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNetworkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNetworkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNetworkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNetworkRequestValidationError) ErrorName() string {
	return "ListNetworkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListNetworkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNetworkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNetworkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNetworkRequestValidationError{}

// Validate checks the field values on ListNetworksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListNetworksResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListNetworksResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListNetworksResponseValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListNetworksResponseValidationError is the validation error returned by
// ListNetworksResponse.Validate if the designated constraints aren't met.
type ListNetworksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNetworksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNetworksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNetworksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNetworksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNetworksResponseValidationError) ErrorName() string {
	return "ListNetworksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListNetworksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNetworksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNetworksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNetworksResponseValidationError{}

// Validate checks the field values on Lifecycle with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Lifecycle) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LifecycleValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for ConfigYaml

	for idx, item := range m.GetEnvironments() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LifecycleValidationError{
					field:  fmt.Sprintf("Environments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetLifecycles() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LifecycleValidationError{
					field:  fmt.Sprintf("Lifecycles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAppConfig() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LifecycleValidationError{
					field:  fmt.Sprintf("AppConfig[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAppVersion() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LifecycleValidationError{
					field:  fmt.Sprintf("AppVersion[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetLifecycleId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LifecycleValidationError{
				field:  "LifecycleId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// LifecycleValidationError is the validation error returned by
// Lifecycle.Validate if the designated constraints aren't met.
type LifecycleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LifecycleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LifecycleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LifecycleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LifecycleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LifecycleValidationError) ErrorName() string { return "LifecycleValidationError" }

// Error satisfies the builtin error interface
func (e LifecycleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLifecycle.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LifecycleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LifecycleValidationError{}

// Validate checks the field values on CreateLifecycleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateLifecycleRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateLifecycleRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateLifecycleRequestValidationError is the validation error returned by
// CreateLifecycleRequest.Validate if the designated constraints aren't met.
type CreateLifecycleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLifecycleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLifecycleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLifecycleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLifecycleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLifecycleRequestValidationError) ErrorName() string {
	return "CreateLifecycleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLifecycleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLifecycleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLifecycleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLifecycleRequestValidationError{}

// Validate checks the field values on CreateLifecycleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateLifecycleResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateLifecycleResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateLifecycleResponseValidationError is the validation error returned by
// CreateLifecycleResponse.Validate if the designated constraints aren't met.
type CreateLifecycleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLifecycleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLifecycleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLifecycleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLifecycleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLifecycleResponseValidationError) ErrorName() string {
	return "CreateLifecycleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLifecycleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLifecycleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLifecycleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLifecycleResponseValidationError{}

// Validate checks the field values on ReadLifecycleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadLifecycleRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadLifecycleRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadLifecycleRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadLifecycleRequestValidationError is the validation error returned by
// ReadLifecycleRequest.Validate if the designated constraints aren't met.
type ReadLifecycleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadLifecycleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadLifecycleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadLifecycleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadLifecycleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadLifecycleRequestValidationError) ErrorName() string {
	return "ReadLifecycleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadLifecycleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadLifecycleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadLifecycleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadLifecycleRequestValidationError{}

// Validate checks the field values on ReadLifecycleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadLifecycleResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadLifecycleResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadLifecycleResponseValidationError is the validation error returned by
// ReadLifecycleResponse.Validate if the designated constraints aren't met.
type ReadLifecycleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadLifecycleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadLifecycleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadLifecycleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadLifecycleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadLifecycleResponseValidationError) ErrorName() string {
	return "ReadLifecycleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadLifecycleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadLifecycleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadLifecycleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadLifecycleResponseValidationError{}

// Validate checks the field values on UpdateLifecycleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateLifecycleRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateLifecycleRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateLifecycleRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateLifecycleRequestValidationError is the validation error returned by
// UpdateLifecycleRequest.Validate if the designated constraints aren't met.
type UpdateLifecycleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLifecycleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLifecycleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLifecycleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLifecycleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLifecycleRequestValidationError) ErrorName() string {
	return "UpdateLifecycleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLifecycleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLifecycleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLifecycleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLifecycleRequestValidationError{}

// Validate checks the field values on UpdateLifecycleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateLifecycleResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateLifecycleResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateLifecycleResponseValidationError is the validation error returned by
// UpdateLifecycleResponse.Validate if the designated constraints aren't met.
type UpdateLifecycleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLifecycleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLifecycleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLifecycleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLifecycleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLifecycleResponseValidationError) ErrorName() string {
	return "UpdateLifecycleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLifecycleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLifecycleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLifecycleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLifecycleResponseValidationError{}

// Validate checks the field values on DeleteLifecycleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteLifecycleRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteLifecycleRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeleteLifecycleRequestValidationError is the validation error returned by
// DeleteLifecycleRequest.Validate if the designated constraints aren't met.
type DeleteLifecycleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteLifecycleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteLifecycleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteLifecycleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteLifecycleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteLifecycleRequestValidationError) ErrorName() string {
	return "DeleteLifecycleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteLifecycleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteLifecycleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteLifecycleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteLifecycleRequestValidationError{}

// Validate checks the field values on DeleteLifecycleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteLifecycleResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteLifecycleResponseValidationError is the validation error returned by
// DeleteLifecycleResponse.Validate if the designated constraints aren't met.
type DeleteLifecycleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteLifecycleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteLifecycleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteLifecycleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteLifecycleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteLifecycleResponseValidationError) ErrorName() string {
	return "DeleteLifecycleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteLifecycleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteLifecycleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteLifecycleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteLifecycleResponseValidationError{}

// Validate checks the field values on ListLifecycleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListLifecycleRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListLifecycleRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOrderBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListLifecycleRequestValidationError{
				field:  "OrderBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListLifecycleRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListLifecycleRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListLifecycleRequestValidationError is the validation error returned by
// ListLifecycleRequest.Validate if the designated constraints aren't met.
type ListLifecycleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLifecycleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLifecycleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLifecycleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLifecycleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLifecycleRequestValidationError) ErrorName() string {
	return "ListLifecycleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListLifecycleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLifecycleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLifecycleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLifecycleRequestValidationError{}

// Validate checks the field values on ListLifecyclesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListLifecyclesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLifecyclesResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListLifecyclesResponseValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListLifecyclesResponseValidationError is the validation error returned by
// ListLifecyclesResponse.Validate if the designated constraints aren't met.
type ListLifecyclesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLifecyclesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLifecyclesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLifecyclesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLifecyclesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLifecyclesResponseValidationError) ErrorName() string {
	return "ListLifecyclesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListLifecyclesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLifecyclesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLifecyclesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLifecyclesResponseValidationError{}

// Validate checks the field values on ChartVersion with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ChartVersion) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChartVersionValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Repo

	// no validation rules for Version

	if v, ok := interface{}(m.GetApplicationId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChartVersionValidationError{
				field:  "ApplicationId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ChartVersionValidationError is the validation error returned by
// ChartVersion.Validate if the designated constraints aren't met.
type ChartVersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChartVersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChartVersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChartVersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChartVersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChartVersionValidationError) ErrorName() string { return "ChartVersionValidationError" }

// Error satisfies the builtin error interface
func (e ChartVersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChartVersion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChartVersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChartVersionValidationError{}

// Validate checks the field values on CreateChartVersionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateChartVersionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateChartVersionRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateChartVersionRequestValidationError is the validation error returned by
// CreateChartVersionRequest.Validate if the designated constraints aren't met.
type CreateChartVersionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateChartVersionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateChartVersionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateChartVersionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateChartVersionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateChartVersionRequestValidationError) ErrorName() string {
	return "CreateChartVersionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateChartVersionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateChartVersionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateChartVersionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateChartVersionRequestValidationError{}

// Validate checks the field values on CreateChartVersionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateChartVersionResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateChartVersionResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateChartVersionResponseValidationError is the validation error returned
// by CreateChartVersionResponse.Validate if the designated constraints aren't met.
type CreateChartVersionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateChartVersionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateChartVersionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateChartVersionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateChartVersionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateChartVersionResponseValidationError) ErrorName() string {
	return "CreateChartVersionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateChartVersionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateChartVersionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateChartVersionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateChartVersionResponseValidationError{}

// Validate checks the field values on ReadChartVersionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadChartVersionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadChartVersionRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadChartVersionRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadChartVersionRequestValidationError is the validation error returned by
// ReadChartVersionRequest.Validate if the designated constraints aren't met.
type ReadChartVersionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadChartVersionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadChartVersionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadChartVersionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadChartVersionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadChartVersionRequestValidationError) ErrorName() string {
	return "ReadChartVersionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadChartVersionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadChartVersionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadChartVersionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadChartVersionRequestValidationError{}

// Validate checks the field values on ReadChartVersionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadChartVersionResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadChartVersionResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadChartVersionResponseValidationError is the validation error returned by
// ReadChartVersionResponse.Validate if the designated constraints aren't met.
type ReadChartVersionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadChartVersionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadChartVersionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadChartVersionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadChartVersionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadChartVersionResponseValidationError) ErrorName() string {
	return "ReadChartVersionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadChartVersionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadChartVersionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadChartVersionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadChartVersionResponseValidationError{}

// Validate checks the field values on UpdateChartVersionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateChartVersionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateChartVersionRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateChartVersionRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateChartVersionRequestValidationError is the validation error returned by
// UpdateChartVersionRequest.Validate if the designated constraints aren't met.
type UpdateChartVersionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateChartVersionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateChartVersionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateChartVersionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateChartVersionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateChartVersionRequestValidationError) ErrorName() string {
	return "UpdateChartVersionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateChartVersionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateChartVersionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateChartVersionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateChartVersionRequestValidationError{}

// Validate checks the field values on UpdateChartVersionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateChartVersionResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateChartVersionResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateChartVersionResponseValidationError is the validation error returned
// by UpdateChartVersionResponse.Validate if the designated constraints aren't met.
type UpdateChartVersionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateChartVersionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateChartVersionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateChartVersionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateChartVersionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateChartVersionResponseValidationError) ErrorName() string {
	return "UpdateChartVersionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateChartVersionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateChartVersionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateChartVersionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateChartVersionResponseValidationError{}

// Validate checks the field values on DeleteChartVersionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteChartVersionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteChartVersionRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeleteChartVersionRequestValidationError is the validation error returned by
// DeleteChartVersionRequest.Validate if the designated constraints aren't met.
type DeleteChartVersionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteChartVersionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteChartVersionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteChartVersionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteChartVersionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteChartVersionRequestValidationError) ErrorName() string {
	return "DeleteChartVersionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteChartVersionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteChartVersionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteChartVersionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteChartVersionRequestValidationError{}

// Validate checks the field values on DeleteChartVersionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteChartVersionResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteChartVersionResponseValidationError is the validation error returned
// by DeleteChartVersionResponse.Validate if the designated constraints aren't met.
type DeleteChartVersionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteChartVersionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteChartVersionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteChartVersionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteChartVersionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteChartVersionResponseValidationError) ErrorName() string {
	return "DeleteChartVersionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteChartVersionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteChartVersionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteChartVersionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteChartVersionResponseValidationError{}

// Validate checks the field values on ListChartVersionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListChartVersionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListChartVersionRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOrderBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListChartVersionRequestValidationError{
				field:  "OrderBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListChartVersionRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListChartVersionRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListChartVersionRequestValidationError is the validation error returned by
// ListChartVersionRequest.Validate if the designated constraints aren't met.
type ListChartVersionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListChartVersionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListChartVersionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListChartVersionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListChartVersionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListChartVersionRequestValidationError) ErrorName() string {
	return "ListChartVersionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListChartVersionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListChartVersionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListChartVersionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListChartVersionRequestValidationError{}

// Validate checks the field values on ListChartVersionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListChartVersionsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListChartVersionsResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListChartVersionsResponseValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListChartVersionsResponseValidationError is the validation error returned by
// ListChartVersionsResponse.Validate if the designated constraints aren't met.
type ListChartVersionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListChartVersionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListChartVersionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListChartVersionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListChartVersionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListChartVersionsResponseValidationError) ErrorName() string {
	return "ListChartVersionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListChartVersionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListChartVersionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListChartVersionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListChartVersionsResponseValidationError{}

// Validate checks the field values on AppConfig with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *AppConfig) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppConfigValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for ConfigYaml

	if v, ok := interface{}(m.GetApplicationId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppConfigValidationError{
				field:  "ApplicationId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLifecycleId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppConfigValidationError{
				field:  "LifecycleId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEnvironmentId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppConfigValidationError{
				field:  "EnvironmentId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AppConfigValidationError is the validation error returned by
// AppConfig.Validate if the designated constraints aren't met.
type AppConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppConfigValidationError) ErrorName() string { return "AppConfigValidationError" }

// Error satisfies the builtin error interface
func (e AppConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppConfigValidationError{}

// Validate checks the field values on CreateAppConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateAppConfigRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAppConfigRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateAppConfigRequestValidationError is the validation error returned by
// CreateAppConfigRequest.Validate if the designated constraints aren't met.
type CreateAppConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAppConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAppConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAppConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAppConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAppConfigRequestValidationError) ErrorName() string {
	return "CreateAppConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAppConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAppConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAppConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAppConfigRequestValidationError{}

// Validate checks the field values on CreateAppConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateAppConfigResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAppConfigResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateAppConfigResponseValidationError is the validation error returned by
// CreateAppConfigResponse.Validate if the designated constraints aren't met.
type CreateAppConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAppConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAppConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAppConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAppConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAppConfigResponseValidationError) ErrorName() string {
	return "CreateAppConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAppConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAppConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAppConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAppConfigResponseValidationError{}

// Validate checks the field values on ReadAppConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadAppConfigRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadAppConfigRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadAppConfigRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadAppConfigRequestValidationError is the validation error returned by
// ReadAppConfigRequest.Validate if the designated constraints aren't met.
type ReadAppConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadAppConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadAppConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadAppConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadAppConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadAppConfigRequestValidationError) ErrorName() string {
	return "ReadAppConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadAppConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadAppConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadAppConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadAppConfigRequestValidationError{}

// Validate checks the field values on ReadAppConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadAppConfigResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadAppConfigResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadAppConfigResponseValidationError is the validation error returned by
// ReadAppConfigResponse.Validate if the designated constraints aren't met.
type ReadAppConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadAppConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadAppConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadAppConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadAppConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadAppConfigResponseValidationError) ErrorName() string {
	return "ReadAppConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadAppConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadAppConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadAppConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadAppConfigResponseValidationError{}

// Validate checks the field values on UpdateAppConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateAppConfigRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAppConfigRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAppConfigRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateAppConfigRequestValidationError is the validation error returned by
// UpdateAppConfigRequest.Validate if the designated constraints aren't met.
type UpdateAppConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAppConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAppConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAppConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAppConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAppConfigRequestValidationError) ErrorName() string {
	return "UpdateAppConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAppConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAppConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAppConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAppConfigRequestValidationError{}

// Validate checks the field values on UpdateAppConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateAppConfigResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAppConfigResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateAppConfigResponseValidationError is the validation error returned by
// UpdateAppConfigResponse.Validate if the designated constraints aren't met.
type UpdateAppConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAppConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAppConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAppConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAppConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAppConfigResponseValidationError) ErrorName() string {
	return "UpdateAppConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAppConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAppConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAppConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAppConfigResponseValidationError{}

// Validate checks the field values on DeleteAppConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteAppConfigRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteAppConfigRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeleteAppConfigRequestValidationError is the validation error returned by
// DeleteAppConfigRequest.Validate if the designated constraints aren't met.
type DeleteAppConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAppConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAppConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAppConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAppConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAppConfigRequestValidationError) ErrorName() string {
	return "DeleteAppConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAppConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAppConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAppConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAppConfigRequestValidationError{}

// Validate checks the field values on DeleteAppConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteAppConfigResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteAppConfigResponseValidationError is the validation error returned by
// DeleteAppConfigResponse.Validate if the designated constraints aren't met.
type DeleteAppConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAppConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAppConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAppConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAppConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAppConfigResponseValidationError) ErrorName() string {
	return "DeleteAppConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAppConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAppConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAppConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAppConfigResponseValidationError{}

// Validate checks the field values on ListAppConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAppConfigRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAppConfigRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOrderBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAppConfigRequestValidationError{
				field:  "OrderBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAppConfigRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAppConfigRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListAppConfigRequestValidationError is the validation error returned by
// ListAppConfigRequest.Validate if the designated constraints aren't met.
type ListAppConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAppConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAppConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAppConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAppConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAppConfigRequestValidationError) ErrorName() string {
	return "ListAppConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAppConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAppConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAppConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAppConfigRequestValidationError{}

// Validate checks the field values on ListAppConfigsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAppConfigsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAppConfigsResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAppConfigsResponseValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListAppConfigsResponseValidationError is the validation error returned by
// ListAppConfigsResponse.Validate if the designated constraints aren't met.
type ListAppConfigsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAppConfigsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAppConfigsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAppConfigsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAppConfigsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAppConfigsResponseValidationError) ErrorName() string {
	return "ListAppConfigsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAppConfigsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAppConfigsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAppConfigsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAppConfigsResponseValidationError{}

// Validate checks the field values on Environment with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Environment) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EnvironmentValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for ConfigYaml

	for idx, item := range m.GetApplicationInstances() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnvironmentValidationError{
					field:  fmt.Sprintf("ApplicationInstances[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAppConfig() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnvironmentValidationError{
					field:  fmt.Sprintf("AppConfig[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAppVersion() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnvironmentValidationError{
					field:  fmt.Sprintf("AppVersion[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetLifecycleId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EnvironmentValidationError{
				field:  "LifecycleId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// EnvironmentValidationError is the validation error returned by
// Environment.Validate if the designated constraints aren't met.
type EnvironmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnvironmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnvironmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnvironmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnvironmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnvironmentValidationError) ErrorName() string { return "EnvironmentValidationError" }

// Error satisfies the builtin error interface
func (e EnvironmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnvironment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnvironmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnvironmentValidationError{}

// Validate checks the field values on CreateEnvironmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateEnvironmentRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateEnvironmentRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateEnvironmentRequestValidationError is the validation error returned by
// CreateEnvironmentRequest.Validate if the designated constraints aren't met.
type CreateEnvironmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEnvironmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEnvironmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEnvironmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEnvironmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEnvironmentRequestValidationError) ErrorName() string {
	return "CreateEnvironmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEnvironmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEnvironmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEnvironmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEnvironmentRequestValidationError{}

// Validate checks the field values on CreateEnvironmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateEnvironmentResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateEnvironmentResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateEnvironmentResponseValidationError is the validation error returned by
// CreateEnvironmentResponse.Validate if the designated constraints aren't met.
type CreateEnvironmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEnvironmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEnvironmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEnvironmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEnvironmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEnvironmentResponseValidationError) ErrorName() string {
	return "CreateEnvironmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEnvironmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEnvironmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEnvironmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEnvironmentResponseValidationError{}

// Validate checks the field values on ReadEnvironmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadEnvironmentRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadEnvironmentRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadEnvironmentRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadEnvironmentRequestValidationError is the validation error returned by
// ReadEnvironmentRequest.Validate if the designated constraints aren't met.
type ReadEnvironmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadEnvironmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadEnvironmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadEnvironmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadEnvironmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadEnvironmentRequestValidationError) ErrorName() string {
	return "ReadEnvironmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadEnvironmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadEnvironmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadEnvironmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadEnvironmentRequestValidationError{}

// Validate checks the field values on ReadEnvironmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadEnvironmentResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadEnvironmentResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadEnvironmentResponseValidationError is the validation error returned by
// ReadEnvironmentResponse.Validate if the designated constraints aren't met.
type ReadEnvironmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadEnvironmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadEnvironmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadEnvironmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadEnvironmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadEnvironmentResponseValidationError) ErrorName() string {
	return "ReadEnvironmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadEnvironmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadEnvironmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadEnvironmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadEnvironmentResponseValidationError{}

// Validate checks the field values on UpdateEnvironmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateEnvironmentRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateEnvironmentRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateEnvironmentRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateEnvironmentRequestValidationError is the validation error returned by
// UpdateEnvironmentRequest.Validate if the designated constraints aren't met.
type UpdateEnvironmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEnvironmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEnvironmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEnvironmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEnvironmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEnvironmentRequestValidationError) ErrorName() string {
	return "UpdateEnvironmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEnvironmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEnvironmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEnvironmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEnvironmentRequestValidationError{}

// Validate checks the field values on UpdateEnvironmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateEnvironmentResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateEnvironmentResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateEnvironmentResponseValidationError is the validation error returned by
// UpdateEnvironmentResponse.Validate if the designated constraints aren't met.
type UpdateEnvironmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEnvironmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEnvironmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEnvironmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEnvironmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEnvironmentResponseValidationError) ErrorName() string {
	return "UpdateEnvironmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEnvironmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEnvironmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEnvironmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEnvironmentResponseValidationError{}

// Validate checks the field values on DeleteEnvironmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteEnvironmentRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteEnvironmentRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeleteEnvironmentRequestValidationError is the validation error returned by
// DeleteEnvironmentRequest.Validate if the designated constraints aren't met.
type DeleteEnvironmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEnvironmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEnvironmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEnvironmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEnvironmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEnvironmentRequestValidationError) ErrorName() string {
	return "DeleteEnvironmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEnvironmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEnvironmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEnvironmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEnvironmentRequestValidationError{}

// Validate checks the field values on DeleteEnvironmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteEnvironmentResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteEnvironmentResponseValidationError is the validation error returned by
// DeleteEnvironmentResponse.Validate if the designated constraints aren't met.
type DeleteEnvironmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEnvironmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEnvironmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEnvironmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEnvironmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEnvironmentResponseValidationError) ErrorName() string {
	return "DeleteEnvironmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEnvironmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEnvironmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEnvironmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEnvironmentResponseValidationError{}

// Validate checks the field values on ListEnvironmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListEnvironmentRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListEnvironmentRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOrderBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListEnvironmentRequestValidationError{
				field:  "OrderBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListEnvironmentRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListEnvironmentRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListEnvironmentRequestValidationError is the validation error returned by
// ListEnvironmentRequest.Validate if the designated constraints aren't met.
type ListEnvironmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEnvironmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEnvironmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEnvironmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEnvironmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEnvironmentRequestValidationError) ErrorName() string {
	return "ListEnvironmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEnvironmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEnvironmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEnvironmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEnvironmentRequestValidationError{}

// Validate checks the field values on ListEnvironmentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListEnvironmentsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListEnvironmentsResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListEnvironmentsResponseValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListEnvironmentsResponseValidationError is the validation error returned by
// ListEnvironmentsResponse.Validate if the designated constraints aren't met.
type ListEnvironmentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEnvironmentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEnvironmentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEnvironmentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEnvironmentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEnvironmentsResponseValidationError) ErrorName() string {
	return "ListEnvironmentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListEnvironmentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEnvironmentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEnvironmentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEnvironmentsResponseValidationError{}

// Validate checks the field values on Application with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Application) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Chart

	// no validation rules for Repo

	// no validation rules for TicketLink

	// no validation rules for ConfigYaml

	return nil
}

// ApplicationValidationError is the validation error returned by
// Application.Validate if the designated constraints aren't met.
type ApplicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationValidationError) ErrorName() string { return "ApplicationValidationError" }

// Error satisfies the builtin error interface
func (e ApplicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationValidationError{}

// Validate checks the field values on CreateApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateApplicationRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateApplicationRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateApplicationRequestValidationError is the validation error returned by
// CreateApplicationRequest.Validate if the designated constraints aren't met.
type CreateApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateApplicationRequestValidationError) ErrorName() string {
	return "CreateApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateApplicationRequestValidationError{}

// Validate checks the field values on CreateApplicationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateApplicationResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateApplicationResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateApplicationResponseValidationError is the validation error returned by
// CreateApplicationResponse.Validate if the designated constraints aren't met.
type CreateApplicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateApplicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateApplicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateApplicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateApplicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateApplicationResponseValidationError) ErrorName() string {
	return "CreateApplicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateApplicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateApplicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateApplicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateApplicationResponseValidationError{}

// Validate checks the field values on ReadApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadApplicationRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadApplicationRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadApplicationRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadApplicationRequestValidationError is the validation error returned by
// ReadApplicationRequest.Validate if the designated constraints aren't met.
type ReadApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadApplicationRequestValidationError) ErrorName() string {
	return "ReadApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadApplicationRequestValidationError{}

// Validate checks the field values on ReadApplicationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadApplicationResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadApplicationResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadApplicationResponseValidationError is the validation error returned by
// ReadApplicationResponse.Validate if the designated constraints aren't met.
type ReadApplicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadApplicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadApplicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadApplicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadApplicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadApplicationResponseValidationError) ErrorName() string {
	return "ReadApplicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadApplicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadApplicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadApplicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadApplicationResponseValidationError{}

// Validate checks the field values on UpdateApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateApplicationRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateApplicationRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateApplicationRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateApplicationRequestValidationError is the validation error returned by
// UpdateApplicationRequest.Validate if the designated constraints aren't met.
type UpdateApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateApplicationRequestValidationError) ErrorName() string {
	return "UpdateApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateApplicationRequestValidationError{}

// Validate checks the field values on UpdateApplicationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateApplicationResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateApplicationResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateApplicationResponseValidationError is the validation error returned by
// UpdateApplicationResponse.Validate if the designated constraints aren't met.
type UpdateApplicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateApplicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateApplicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateApplicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateApplicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateApplicationResponseValidationError) ErrorName() string {
	return "UpdateApplicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateApplicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateApplicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateApplicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateApplicationResponseValidationError{}

// Validate checks the field values on DeleteApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteApplicationRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteApplicationRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeleteApplicationRequestValidationError is the validation error returned by
// DeleteApplicationRequest.Validate if the designated constraints aren't met.
type DeleteApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteApplicationRequestValidationError) ErrorName() string {
	return "DeleteApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteApplicationRequestValidationError{}

// Validate checks the field values on DeleteApplicationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteApplicationResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteApplicationResponseValidationError is the validation error returned by
// DeleteApplicationResponse.Validate if the designated constraints aren't met.
type DeleteApplicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteApplicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteApplicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteApplicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteApplicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteApplicationResponseValidationError) ErrorName() string {
	return "DeleteApplicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteApplicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteApplicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteApplicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteApplicationResponseValidationError{}

// Validate checks the field values on ListApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListApplicationRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListApplicationRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOrderBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListApplicationRequestValidationError{
				field:  "OrderBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListApplicationRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListApplicationRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListApplicationRequestValidationError is the validation error returned by
// ListApplicationRequest.Validate if the designated constraints aren't met.
type ListApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApplicationRequestValidationError) ErrorName() string {
	return "ListApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApplicationRequestValidationError{}

// Validate checks the field values on ListApplicationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListApplicationsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListApplicationsResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListApplicationsResponseValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListApplicationsResponseValidationError is the validation error returned by
// ListApplicationsResponse.Validate if the designated constraints aren't met.
type ListApplicationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApplicationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApplicationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApplicationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApplicationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApplicationsResponseValidationError) ErrorName() string {
	return "ListApplicationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListApplicationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApplicationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApplicationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApplicationsResponseValidationError{}

// Validate checks the field values on AppVersion with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *AppVersion) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppVersionValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Description

	if v, ok := interface{}(m.GetChartVersion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppVersionValidationError{
				field:  "ChartVersion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetChartVersionId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppVersionValidationError{
				field:  "ChartVersionId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetApplicationId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppVersionValidationError{
				field:  "ApplicationId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLifecycleId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppVersionValidationError{
				field:  "LifecycleId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEnvironmentId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppVersionValidationError{
				field:  "EnvironmentId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AppVersionValidationError is the validation error returned by
// AppVersion.Validate if the designated constraints aren't met.
type AppVersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppVersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppVersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppVersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppVersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppVersionValidationError) ErrorName() string { return "AppVersionValidationError" }

// Error satisfies the builtin error interface
func (e AppVersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppVersion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppVersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppVersionValidationError{}

// Validate checks the field values on CreateAppVersionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateAppVersionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAppVersionRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateAppVersionRequestValidationError is the validation error returned by
// CreateAppVersionRequest.Validate if the designated constraints aren't met.
type CreateAppVersionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAppVersionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAppVersionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAppVersionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAppVersionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAppVersionRequestValidationError) ErrorName() string {
	return "CreateAppVersionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAppVersionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAppVersionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAppVersionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAppVersionRequestValidationError{}

// Validate checks the field values on CreateAppVersionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateAppVersionResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAppVersionResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateAppVersionResponseValidationError is the validation error returned by
// CreateAppVersionResponse.Validate if the designated constraints aren't met.
type CreateAppVersionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAppVersionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAppVersionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAppVersionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAppVersionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAppVersionResponseValidationError) ErrorName() string {
	return "CreateAppVersionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAppVersionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAppVersionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAppVersionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAppVersionResponseValidationError{}

// Validate checks the field values on ReadAppVersionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadAppVersionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadAppVersionRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadAppVersionRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadAppVersionRequestValidationError is the validation error returned by
// ReadAppVersionRequest.Validate if the designated constraints aren't met.
type ReadAppVersionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadAppVersionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadAppVersionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadAppVersionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadAppVersionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadAppVersionRequestValidationError) ErrorName() string {
	return "ReadAppVersionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadAppVersionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadAppVersionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadAppVersionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadAppVersionRequestValidationError{}

// Validate checks the field values on ReadAppVersionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadAppVersionResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadAppVersionResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadAppVersionResponseValidationError is the validation error returned by
// ReadAppVersionResponse.Validate if the designated constraints aren't met.
type ReadAppVersionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadAppVersionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadAppVersionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadAppVersionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadAppVersionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadAppVersionResponseValidationError) ErrorName() string {
	return "ReadAppVersionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadAppVersionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadAppVersionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadAppVersionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadAppVersionResponseValidationError{}

// Validate checks the field values on UpdateAppVersionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateAppVersionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAppVersionRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAppVersionRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateAppVersionRequestValidationError is the validation error returned by
// UpdateAppVersionRequest.Validate if the designated constraints aren't met.
type UpdateAppVersionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAppVersionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAppVersionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAppVersionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAppVersionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAppVersionRequestValidationError) ErrorName() string {
	return "UpdateAppVersionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAppVersionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAppVersionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAppVersionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAppVersionRequestValidationError{}

// Validate checks the field values on UpdateAppVersionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateAppVersionResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAppVersionResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateAppVersionResponseValidationError is the validation error returned by
// UpdateAppVersionResponse.Validate if the designated constraints aren't met.
type UpdateAppVersionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAppVersionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAppVersionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAppVersionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAppVersionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAppVersionResponseValidationError) ErrorName() string {
	return "UpdateAppVersionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAppVersionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAppVersionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAppVersionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAppVersionResponseValidationError{}

// Validate checks the field values on DeleteAppVersionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteAppVersionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteAppVersionRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeleteAppVersionRequestValidationError is the validation error returned by
// DeleteAppVersionRequest.Validate if the designated constraints aren't met.
type DeleteAppVersionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAppVersionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAppVersionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAppVersionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAppVersionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAppVersionRequestValidationError) ErrorName() string {
	return "DeleteAppVersionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAppVersionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAppVersionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAppVersionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAppVersionRequestValidationError{}

// Validate checks the field values on DeleteAppVersionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteAppVersionResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteAppVersionResponseValidationError is the validation error returned by
// DeleteAppVersionResponse.Validate if the designated constraints aren't met.
type DeleteAppVersionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAppVersionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAppVersionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAppVersionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAppVersionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAppVersionResponseValidationError) ErrorName() string {
	return "DeleteAppVersionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAppVersionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAppVersionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAppVersionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAppVersionResponseValidationError{}

// Validate checks the field values on ListAppVersionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAppVersionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAppVersionRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOrderBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAppVersionRequestValidationError{
				field:  "OrderBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAppVersionRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAppVersionRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListAppVersionRequestValidationError is the validation error returned by
// ListAppVersionRequest.Validate if the designated constraints aren't met.
type ListAppVersionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAppVersionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAppVersionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAppVersionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAppVersionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAppVersionRequestValidationError) ErrorName() string {
	return "ListAppVersionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAppVersionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAppVersionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAppVersionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAppVersionRequestValidationError{}

// Validate checks the field values on ListAppVersionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAppVersionsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAppVersionsResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAppVersionsResponseValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListAppVersionsResponseValidationError is the validation error returned by
// ListAppVersionsResponse.Validate if the designated constraints aren't met.
type ListAppVersionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAppVersionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAppVersionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAppVersionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAppVersionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAppVersionsResponseValidationError) ErrorName() string {
	return "ListAppVersionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAppVersionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAppVersionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAppVersionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAppVersionsResponseValidationError{}

// Validate checks the field values on ApplicationInstance with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApplicationInstance) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationInstanceValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Enable

	if v, ok := interface{}(m.GetDeployment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationInstanceValidationError{
				field:  "Deployment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ConfigYaml

	if v, ok := interface{}(m.GetChartVersion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationInstanceValidationError{
				field:  "ChartVersion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetChartVersionId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationInstanceValidationError{
				field:  "ChartVersionId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEnvironmentId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationInstanceValidationError{
				field:  "EnvironmentId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetApplicationId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationInstanceValidationError{
				field:  "ApplicationId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAppVersionId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationInstanceValidationError{
				field:  "AppVersionId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ApplicationInstanceValidationError is the validation error returned by
// ApplicationInstance.Validate if the designated constraints aren't met.
type ApplicationInstanceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationInstanceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationInstanceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationInstanceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationInstanceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationInstanceValidationError) ErrorName() string {
	return "ApplicationInstanceValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationInstanceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationInstance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationInstanceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationInstanceValidationError{}

// Validate checks the field values on CreateApplicationInstanceRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *CreateApplicationInstanceRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateApplicationInstanceRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateApplicationInstanceRequestValidationError is the validation error
// returned by CreateApplicationInstanceRequest.Validate if the designated
// constraints aren't met.
type CreateApplicationInstanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateApplicationInstanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateApplicationInstanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateApplicationInstanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateApplicationInstanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateApplicationInstanceRequestValidationError) ErrorName() string {
	return "CreateApplicationInstanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateApplicationInstanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateApplicationInstanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateApplicationInstanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateApplicationInstanceRequestValidationError{}

// Validate checks the field values on CreateApplicationInstanceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *CreateApplicationInstanceResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateApplicationInstanceResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateApplicationInstanceResponseValidationError is the validation error
// returned by CreateApplicationInstanceResponse.Validate if the designated
// constraints aren't met.
type CreateApplicationInstanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateApplicationInstanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateApplicationInstanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateApplicationInstanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateApplicationInstanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateApplicationInstanceResponseValidationError) ErrorName() string {
	return "CreateApplicationInstanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateApplicationInstanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateApplicationInstanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateApplicationInstanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateApplicationInstanceResponseValidationError{}

// Validate checks the field values on ReadApplicationInstanceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadApplicationInstanceRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadApplicationInstanceRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadApplicationInstanceRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadApplicationInstanceRequestValidationError is the validation error
// returned by ReadApplicationInstanceRequest.Validate if the designated
// constraints aren't met.
type ReadApplicationInstanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadApplicationInstanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadApplicationInstanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadApplicationInstanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadApplicationInstanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadApplicationInstanceRequestValidationError) ErrorName() string {
	return "ReadApplicationInstanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadApplicationInstanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadApplicationInstanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadApplicationInstanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadApplicationInstanceRequestValidationError{}

// Validate checks the field values on ReadApplicationInstanceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadApplicationInstanceResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadApplicationInstanceResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadApplicationInstanceResponseValidationError is the validation error
// returned by ReadApplicationInstanceResponse.Validate if the designated
// constraints aren't met.
type ReadApplicationInstanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadApplicationInstanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadApplicationInstanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadApplicationInstanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadApplicationInstanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadApplicationInstanceResponseValidationError) ErrorName() string {
	return "ReadApplicationInstanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadApplicationInstanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadApplicationInstanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadApplicationInstanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadApplicationInstanceResponseValidationError{}

// Validate checks the field values on UpdateApplicationInstanceRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *UpdateApplicationInstanceRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateApplicationInstanceRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateApplicationInstanceRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateApplicationInstanceRequestValidationError is the validation error
// returned by UpdateApplicationInstanceRequest.Validate if the designated
// constraints aren't met.
type UpdateApplicationInstanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateApplicationInstanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateApplicationInstanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateApplicationInstanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateApplicationInstanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateApplicationInstanceRequestValidationError) ErrorName() string {
	return "UpdateApplicationInstanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateApplicationInstanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateApplicationInstanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateApplicationInstanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateApplicationInstanceRequestValidationError{}

// Validate checks the field values on UpdateApplicationInstanceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *UpdateApplicationInstanceResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateApplicationInstanceResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateApplicationInstanceResponseValidationError is the validation error
// returned by UpdateApplicationInstanceResponse.Validate if the designated
// constraints aren't met.
type UpdateApplicationInstanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateApplicationInstanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateApplicationInstanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateApplicationInstanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateApplicationInstanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateApplicationInstanceResponseValidationError) ErrorName() string {
	return "UpdateApplicationInstanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateApplicationInstanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateApplicationInstanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateApplicationInstanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateApplicationInstanceResponseValidationError{}

// Validate checks the field values on DeleteApplicationInstanceRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *DeleteApplicationInstanceRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteApplicationInstanceRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeleteApplicationInstanceRequestValidationError is the validation error
// returned by DeleteApplicationInstanceRequest.Validate if the designated
// constraints aren't met.
type DeleteApplicationInstanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteApplicationInstanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteApplicationInstanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteApplicationInstanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteApplicationInstanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteApplicationInstanceRequestValidationError) ErrorName() string {
	return "DeleteApplicationInstanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteApplicationInstanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteApplicationInstanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteApplicationInstanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteApplicationInstanceRequestValidationError{}

// Validate checks the field values on DeleteApplicationInstanceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *DeleteApplicationInstanceResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteApplicationInstanceResponseValidationError is the validation error
// returned by DeleteApplicationInstanceResponse.Validate if the designated
// constraints aren't met.
type DeleteApplicationInstanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteApplicationInstanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteApplicationInstanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteApplicationInstanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteApplicationInstanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteApplicationInstanceResponseValidationError) ErrorName() string {
	return "DeleteApplicationInstanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteApplicationInstanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteApplicationInstanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteApplicationInstanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteApplicationInstanceResponseValidationError{}

// Validate checks the field values on ListApplicationInstanceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListApplicationInstanceRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListApplicationInstanceRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOrderBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListApplicationInstanceRequestValidationError{
				field:  "OrderBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListApplicationInstanceRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListApplicationInstanceRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListApplicationInstanceRequestValidationError is the validation error
// returned by ListApplicationInstanceRequest.Validate if the designated
// constraints aren't met.
type ListApplicationInstanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApplicationInstanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApplicationInstanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApplicationInstanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApplicationInstanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApplicationInstanceRequestValidationError) ErrorName() string {
	return "ListApplicationInstanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListApplicationInstanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApplicationInstanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApplicationInstanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApplicationInstanceRequestValidationError{}

// Validate checks the field values on ListApplicationInstancesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListApplicationInstancesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListApplicationInstancesResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListApplicationInstancesResponseValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListApplicationInstancesResponseValidationError is the validation error
// returned by ListApplicationInstancesResponse.Validate if the designated
// constraints aren't met.
type ListApplicationInstancesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApplicationInstancesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApplicationInstancesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApplicationInstancesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApplicationInstancesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApplicationInstancesResponseValidationError) ErrorName() string {
	return "ListApplicationInstancesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListApplicationInstancesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApplicationInstancesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApplicationInstancesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApplicationInstancesResponseValidationError{}

// Validate checks the field values on Vault with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Vault) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VaultValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Description

	for idx, item := range m.GetSecrets() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return VaultValidationError{
					field:  fmt.Sprintf("Secrets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// VaultValidationError is the validation error returned by Vault.Validate if
// the designated constraints aren't met.
type VaultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VaultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VaultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VaultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VaultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VaultValidationError) ErrorName() string { return "VaultValidationError" }

// Error satisfies the builtin error interface
func (e VaultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVault.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VaultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VaultValidationError{}

// Validate checks the field values on CreateVaultRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateVaultRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateVaultRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateVaultRequestValidationError is the validation error returned by
// CreateVaultRequest.Validate if the designated constraints aren't met.
type CreateVaultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateVaultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateVaultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateVaultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateVaultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateVaultRequestValidationError) ErrorName() string {
	return "CreateVaultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateVaultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateVaultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateVaultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateVaultRequestValidationError{}

// Validate checks the field values on CreateVaultResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateVaultResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateVaultResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateVaultResponseValidationError is the validation error returned by
// CreateVaultResponse.Validate if the designated constraints aren't met.
type CreateVaultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateVaultResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateVaultResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateVaultResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateVaultResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateVaultResponseValidationError) ErrorName() string {
	return "CreateVaultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateVaultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateVaultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateVaultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateVaultResponseValidationError{}

// Validate checks the field values on ReadVaultRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ReadVaultRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadVaultRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadVaultRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadVaultRequestValidationError is the validation error returned by
// ReadVaultRequest.Validate if the designated constraints aren't met.
type ReadVaultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadVaultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadVaultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadVaultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadVaultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadVaultRequestValidationError) ErrorName() string { return "ReadVaultRequestValidationError" }

// Error satisfies the builtin error interface
func (e ReadVaultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadVaultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadVaultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadVaultRequestValidationError{}

// Validate checks the field values on ReadVaultResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ReadVaultResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadVaultResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadVaultResponseValidationError is the validation error returned by
// ReadVaultResponse.Validate if the designated constraints aren't met.
type ReadVaultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadVaultResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadVaultResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadVaultResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadVaultResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadVaultResponseValidationError) ErrorName() string {
	return "ReadVaultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadVaultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadVaultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadVaultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadVaultResponseValidationError{}

// Validate checks the field values on UpdateVaultRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateVaultRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateVaultRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateVaultRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateVaultRequestValidationError is the validation error returned by
// UpdateVaultRequest.Validate if the designated constraints aren't met.
type UpdateVaultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVaultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVaultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVaultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVaultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVaultRequestValidationError) ErrorName() string {
	return "UpdateVaultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateVaultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVaultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVaultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVaultRequestValidationError{}

// Validate checks the field values on UpdateVaultResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateVaultResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateVaultResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateVaultResponseValidationError is the validation error returned by
// UpdateVaultResponse.Validate if the designated constraints aren't met.
type UpdateVaultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVaultResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVaultResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVaultResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVaultResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVaultResponseValidationError) ErrorName() string {
	return "UpdateVaultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateVaultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVaultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVaultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVaultResponseValidationError{}

// Validate checks the field values on DeleteVaultRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteVaultRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteVaultRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeleteVaultRequestValidationError is the validation error returned by
// DeleteVaultRequest.Validate if the designated constraints aren't met.
type DeleteVaultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteVaultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteVaultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteVaultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteVaultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteVaultRequestValidationError) ErrorName() string {
	return "DeleteVaultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteVaultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteVaultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteVaultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteVaultRequestValidationError{}

// Validate checks the field values on DeleteVaultResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteVaultResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteVaultResponseValidationError is the validation error returned by
// DeleteVaultResponse.Validate if the designated constraints aren't met.
type DeleteVaultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteVaultResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteVaultResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteVaultResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteVaultResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteVaultResponseValidationError) ErrorName() string {
	return "DeleteVaultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteVaultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteVaultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteVaultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteVaultResponseValidationError{}

// Validate checks the field values on ListVaultRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListVaultRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListVaultRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOrderBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListVaultRequestValidationError{
				field:  "OrderBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListVaultRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListVaultRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListVaultRequestValidationError is the validation error returned by
// ListVaultRequest.Validate if the designated constraints aren't met.
type ListVaultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListVaultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListVaultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListVaultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListVaultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListVaultRequestValidationError) ErrorName() string { return "ListVaultRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListVaultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListVaultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListVaultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListVaultRequestValidationError{}

// Validate checks the field values on ListVaultsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListVaultsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListVaultsResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListVaultsResponseValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListVaultsResponseValidationError is the validation error returned by
// ListVaultsResponse.Validate if the designated constraints aren't met.
type ListVaultsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListVaultsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListVaultsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListVaultsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListVaultsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListVaultsResponseValidationError) ErrorName() string {
	return "ListVaultsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListVaultsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListVaultsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListVaultsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListVaultsResponseValidationError{}

// Validate checks the field values on Secret with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Secret) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SecretValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Path

	// no validation rules for Type

	// no validation rules for Key

	if v, ok := interface{}(m.GetVaultId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SecretValidationError{
				field:  "VaultId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SecretValidationError is the validation error returned by Secret.Validate if
// the designated constraints aren't met.
type SecretValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecretValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecretValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecretValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecretValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecretValidationError) ErrorName() string { return "SecretValidationError" }

// Error satisfies the builtin error interface
func (e SecretValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecret.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecretValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecretValidationError{}

// Validate checks the field values on CreateSecretRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateSecretRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSecretRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateSecretRequestValidationError is the validation error returned by
// CreateSecretRequest.Validate if the designated constraints aren't met.
type CreateSecretRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSecretRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSecretRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSecretRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSecretRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSecretRequestValidationError) ErrorName() string {
	return "CreateSecretRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSecretRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSecretRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSecretRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSecretRequestValidationError{}

// Validate checks the field values on CreateSecretResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateSecretResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSecretResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateSecretResponseValidationError is the validation error returned by
// CreateSecretResponse.Validate if the designated constraints aren't met.
type CreateSecretResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSecretResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSecretResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSecretResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSecretResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSecretResponseValidationError) ErrorName() string {
	return "CreateSecretResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSecretResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSecretResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSecretResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSecretResponseValidationError{}

// Validate checks the field values on ReadSecretRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ReadSecretRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadSecretRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadSecretRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadSecretRequestValidationError is the validation error returned by
// ReadSecretRequest.Validate if the designated constraints aren't met.
type ReadSecretRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadSecretRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadSecretRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadSecretRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadSecretRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadSecretRequestValidationError) ErrorName() string {
	return "ReadSecretRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadSecretRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadSecretRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadSecretRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadSecretRequestValidationError{}

// Validate checks the field values on ReadSecretResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadSecretResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadSecretResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadSecretResponseValidationError is the validation error returned by
// ReadSecretResponse.Validate if the designated constraints aren't met.
type ReadSecretResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadSecretResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadSecretResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadSecretResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadSecretResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadSecretResponseValidationError) ErrorName() string {
	return "ReadSecretResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadSecretResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadSecretResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadSecretResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadSecretResponseValidationError{}

// Validate checks the field values on UpdateSecretRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateSecretRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSecretRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSecretRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateSecretRequestValidationError is the validation error returned by
// UpdateSecretRequest.Validate if the designated constraints aren't met.
type UpdateSecretRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSecretRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSecretRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSecretRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSecretRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSecretRequestValidationError) ErrorName() string {
	return "UpdateSecretRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSecretRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSecretRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSecretRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSecretRequestValidationError{}

// Validate checks the field values on UpdateSecretResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateSecretResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSecretResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateSecretResponseValidationError is the validation error returned by
// UpdateSecretResponse.Validate if the designated constraints aren't met.
type UpdateSecretResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSecretResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSecretResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSecretResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSecretResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSecretResponseValidationError) ErrorName() string {
	return "UpdateSecretResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSecretResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSecretResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSecretResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSecretResponseValidationError{}

// Validate checks the field values on DeleteSecretRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteSecretRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteSecretRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeleteSecretRequestValidationError is the validation error returned by
// DeleteSecretRequest.Validate if the designated constraints aren't met.
type DeleteSecretRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSecretRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSecretRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSecretRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSecretRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSecretRequestValidationError) ErrorName() string {
	return "DeleteSecretRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSecretRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSecretRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSecretRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSecretRequestValidationError{}

// Validate checks the field values on DeleteSecretResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteSecretResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteSecretResponseValidationError is the validation error returned by
// DeleteSecretResponse.Validate if the designated constraints aren't met.
type DeleteSecretResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSecretResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSecretResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSecretResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSecretResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSecretResponseValidationError) ErrorName() string {
	return "DeleteSecretResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSecretResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSecretResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSecretResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSecretResponseValidationError{}

// Validate checks the field values on ListSecretRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListSecretRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListSecretRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOrderBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListSecretRequestValidationError{
				field:  "OrderBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListSecretRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListSecretRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListSecretRequestValidationError is the validation error returned by
// ListSecretRequest.Validate if the designated constraints aren't met.
type ListSecretRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSecretRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSecretRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSecretRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSecretRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSecretRequestValidationError) ErrorName() string {
	return "ListSecretRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSecretRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSecretRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSecretRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSecretRequestValidationError{}

// Validate checks the field values on ListSecretsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListSecretsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSecretsResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListSecretsResponseValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListSecretsResponseValidationError is the validation error returned by
// ListSecretsResponse.Validate if the designated constraints aren't met.
type ListSecretsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSecretsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSecretsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSecretsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSecretsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSecretsResponseValidationError) ErrorName() string {
	return "ListSecretsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSecretsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSecretsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSecretsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSecretsResponseValidationError{}

// Validate checks the field values on Artifact with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Artifact) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ArtifactValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Repo

	// no validation rules for Commit

	if v, ok := interface{}(m.GetChartVersionId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ArtifactValidationError{
				field:  "ChartVersionId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ArtifactValidationError is the validation error returned by
// Artifact.Validate if the designated constraints aren't met.
type ArtifactValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArtifactValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArtifactValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArtifactValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArtifactValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArtifactValidationError) ErrorName() string { return "ArtifactValidationError" }

// Error satisfies the builtin error interface
func (e ArtifactValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArtifact.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArtifactValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArtifactValidationError{}

// Validate checks the field values on CreateArtifactRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateArtifactRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateArtifactRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateArtifactRequestValidationError is the validation error returned by
// CreateArtifactRequest.Validate if the designated constraints aren't met.
type CreateArtifactRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateArtifactRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateArtifactRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateArtifactRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateArtifactRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateArtifactRequestValidationError) ErrorName() string {
	return "CreateArtifactRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateArtifactRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateArtifactRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateArtifactRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateArtifactRequestValidationError{}

// Validate checks the field values on CreateArtifactResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateArtifactResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateArtifactResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateArtifactResponseValidationError is the validation error returned by
// CreateArtifactResponse.Validate if the designated constraints aren't met.
type CreateArtifactResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateArtifactResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateArtifactResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateArtifactResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateArtifactResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateArtifactResponseValidationError) ErrorName() string {
	return "CreateArtifactResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateArtifactResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateArtifactResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateArtifactResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateArtifactResponseValidationError{}

// Validate checks the field values on ReadArtifactRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadArtifactRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadArtifactRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadArtifactRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadArtifactRequestValidationError is the validation error returned by
// ReadArtifactRequest.Validate if the designated constraints aren't met.
type ReadArtifactRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadArtifactRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadArtifactRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadArtifactRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadArtifactRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadArtifactRequestValidationError) ErrorName() string {
	return "ReadArtifactRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadArtifactRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadArtifactRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadArtifactRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadArtifactRequestValidationError{}

// Validate checks the field values on ReadArtifactResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadArtifactResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadArtifactResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadArtifactResponseValidationError is the validation error returned by
// ReadArtifactResponse.Validate if the designated constraints aren't met.
type ReadArtifactResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadArtifactResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadArtifactResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadArtifactResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadArtifactResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadArtifactResponseValidationError) ErrorName() string {
	return "ReadArtifactResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadArtifactResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadArtifactResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadArtifactResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadArtifactResponseValidationError{}

// Validate checks the field values on UpdateArtifactRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateArtifactRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateArtifactRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateArtifactRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateArtifactRequestValidationError is the validation error returned by
// UpdateArtifactRequest.Validate if the designated constraints aren't met.
type UpdateArtifactRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateArtifactRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateArtifactRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateArtifactRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateArtifactRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateArtifactRequestValidationError) ErrorName() string {
	return "UpdateArtifactRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateArtifactRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateArtifactRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateArtifactRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateArtifactRequestValidationError{}

// Validate checks the field values on UpdateArtifactResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateArtifactResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateArtifactResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateArtifactResponseValidationError is the validation error returned by
// UpdateArtifactResponse.Validate if the designated constraints aren't met.
type UpdateArtifactResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateArtifactResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateArtifactResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateArtifactResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateArtifactResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateArtifactResponseValidationError) ErrorName() string {
	return "UpdateArtifactResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateArtifactResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateArtifactResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateArtifactResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateArtifactResponseValidationError{}

// Validate checks the field values on DeleteArtifactRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteArtifactRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteArtifactRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeleteArtifactRequestValidationError is the validation error returned by
// DeleteArtifactRequest.Validate if the designated constraints aren't met.
type DeleteArtifactRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteArtifactRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteArtifactRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteArtifactRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteArtifactRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteArtifactRequestValidationError) ErrorName() string {
	return "DeleteArtifactRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteArtifactRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteArtifactRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteArtifactRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteArtifactRequestValidationError{}

// Validate checks the field values on DeleteArtifactResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteArtifactResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteArtifactResponseValidationError is the validation error returned by
// DeleteArtifactResponse.Validate if the designated constraints aren't met.
type DeleteArtifactResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteArtifactResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteArtifactResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteArtifactResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteArtifactResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteArtifactResponseValidationError) ErrorName() string {
	return "DeleteArtifactResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteArtifactResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteArtifactResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteArtifactResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteArtifactResponseValidationError{}

// Validate checks the field values on ListArtifactRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListArtifactRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListArtifactRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOrderBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListArtifactRequestValidationError{
				field:  "OrderBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListArtifactRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListArtifactRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListArtifactRequestValidationError is the validation error returned by
// ListArtifactRequest.Validate if the designated constraints aren't met.
type ListArtifactRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListArtifactRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListArtifactRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListArtifactRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListArtifactRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListArtifactRequestValidationError) ErrorName() string {
	return "ListArtifactRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListArtifactRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListArtifactRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListArtifactRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListArtifactRequestValidationError{}

// Validate checks the field values on ListArtifactsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListArtifactsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListArtifactsResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListArtifactsResponseValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListArtifactsResponseValidationError is the validation error returned by
// ListArtifactsResponse.Validate if the designated constraints aren't met.
type ListArtifactsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListArtifactsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListArtifactsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListArtifactsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListArtifactsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListArtifactsResponseValidationError) ErrorName() string {
	return "ListArtifactsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListArtifactsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListArtifactsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListArtifactsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListArtifactsResponseValidationError{}

// Validate checks the field values on KubeCluster with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *KubeCluster) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return KubeClusterValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Description

	if v, ok := interface{}(m.GetNetworkId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return KubeClusterValidationError{
				field:  "NetworkId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// KubeClusterValidationError is the validation error returned by
// KubeCluster.Validate if the designated constraints aren't met.
type KubeClusterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KubeClusterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KubeClusterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KubeClusterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KubeClusterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KubeClusterValidationError) ErrorName() string { return "KubeClusterValidationError" }

// Error satisfies the builtin error interface
func (e KubeClusterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKubeCluster.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KubeClusterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KubeClusterValidationError{}

// Validate checks the field values on CreateKubeClusterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateKubeClusterRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateKubeClusterRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateKubeClusterRequestValidationError is the validation error returned by
// CreateKubeClusterRequest.Validate if the designated constraints aren't met.
type CreateKubeClusterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateKubeClusterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateKubeClusterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateKubeClusterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateKubeClusterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateKubeClusterRequestValidationError) ErrorName() string {
	return "CreateKubeClusterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateKubeClusterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateKubeClusterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateKubeClusterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateKubeClusterRequestValidationError{}

// Validate checks the field values on CreateKubeClusterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateKubeClusterResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateKubeClusterResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateKubeClusterResponseValidationError is the validation error returned by
// CreateKubeClusterResponse.Validate if the designated constraints aren't met.
type CreateKubeClusterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateKubeClusterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateKubeClusterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateKubeClusterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateKubeClusterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateKubeClusterResponseValidationError) ErrorName() string {
	return "CreateKubeClusterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateKubeClusterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateKubeClusterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateKubeClusterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateKubeClusterResponseValidationError{}

// Validate checks the field values on ReadKubeClusterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadKubeClusterRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadKubeClusterRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadKubeClusterRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadKubeClusterRequestValidationError is the validation error returned by
// ReadKubeClusterRequest.Validate if the designated constraints aren't met.
type ReadKubeClusterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadKubeClusterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadKubeClusterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadKubeClusterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadKubeClusterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadKubeClusterRequestValidationError) ErrorName() string {
	return "ReadKubeClusterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadKubeClusterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadKubeClusterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadKubeClusterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadKubeClusterRequestValidationError{}

// Validate checks the field values on ReadKubeClusterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadKubeClusterResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadKubeClusterResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadKubeClusterResponseValidationError is the validation error returned by
// ReadKubeClusterResponse.Validate if the designated constraints aren't met.
type ReadKubeClusterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadKubeClusterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadKubeClusterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadKubeClusterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadKubeClusterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadKubeClusterResponseValidationError) ErrorName() string {
	return "ReadKubeClusterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadKubeClusterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadKubeClusterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadKubeClusterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadKubeClusterResponseValidationError{}

// Validate checks the field values on UpdateKubeClusterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateKubeClusterRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateKubeClusterRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateKubeClusterRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateKubeClusterRequestValidationError is the validation error returned by
// UpdateKubeClusterRequest.Validate if the designated constraints aren't met.
type UpdateKubeClusterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateKubeClusterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateKubeClusterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateKubeClusterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateKubeClusterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateKubeClusterRequestValidationError) ErrorName() string {
	return "UpdateKubeClusterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateKubeClusterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateKubeClusterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateKubeClusterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateKubeClusterRequestValidationError{}

// Validate checks the field values on UpdateKubeClusterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateKubeClusterResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateKubeClusterResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateKubeClusterResponseValidationError is the validation error returned by
// UpdateKubeClusterResponse.Validate if the designated constraints aren't met.
type UpdateKubeClusterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateKubeClusterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateKubeClusterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateKubeClusterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateKubeClusterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateKubeClusterResponseValidationError) ErrorName() string {
	return "UpdateKubeClusterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateKubeClusterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateKubeClusterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateKubeClusterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateKubeClusterResponseValidationError{}

// Validate checks the field values on DeleteKubeClusterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteKubeClusterRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteKubeClusterRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeleteKubeClusterRequestValidationError is the validation error returned by
// DeleteKubeClusterRequest.Validate if the designated constraints aren't met.
type DeleteKubeClusterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteKubeClusterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteKubeClusterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteKubeClusterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteKubeClusterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteKubeClusterRequestValidationError) ErrorName() string {
	return "DeleteKubeClusterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteKubeClusterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteKubeClusterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteKubeClusterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteKubeClusterRequestValidationError{}

// Validate checks the field values on DeleteKubeClusterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteKubeClusterResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteKubeClusterResponseValidationError is the validation error returned by
// DeleteKubeClusterResponse.Validate if the designated constraints aren't met.
type DeleteKubeClusterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteKubeClusterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteKubeClusterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteKubeClusterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteKubeClusterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteKubeClusterResponseValidationError) ErrorName() string {
	return "DeleteKubeClusterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteKubeClusterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteKubeClusterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteKubeClusterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteKubeClusterResponseValidationError{}

// Validate checks the field values on ListKubeClusterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListKubeClusterRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListKubeClusterRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOrderBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListKubeClusterRequestValidationError{
				field:  "OrderBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListKubeClusterRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListKubeClusterRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListKubeClusterRequestValidationError is the validation error returned by
// ListKubeClusterRequest.Validate if the designated constraints aren't met.
type ListKubeClusterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListKubeClusterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListKubeClusterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListKubeClusterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListKubeClusterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListKubeClusterRequestValidationError) ErrorName() string {
	return "ListKubeClusterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListKubeClusterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListKubeClusterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListKubeClusterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListKubeClusterRequestValidationError{}

// Validate checks the field values on ListKubeClustersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListKubeClustersResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListKubeClustersResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListKubeClustersResponseValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListKubeClustersResponseValidationError is the validation error returned by
// ListKubeClustersResponse.Validate if the designated constraints aren't met.
type ListKubeClustersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListKubeClustersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListKubeClustersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListKubeClustersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListKubeClustersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListKubeClustersResponseValidationError) ErrorName() string {
	return "ListKubeClustersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListKubeClustersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListKubeClustersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListKubeClustersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListKubeClustersResponseValidationError{}

// Validate checks the field values on Deployment with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Deployment) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeploymentValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Description

	if v, ok := interface{}(m.GetArtifact()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeploymentValidationError{
				field:  "Artifact",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetArtifactId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeploymentValidationError{
				field:  "ArtifactId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetKubeCluster()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeploymentValidationError{
				field:  "KubeCluster",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetKubeClusterId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeploymentValidationError{
				field:  "KubeClusterId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetApplicationInstanceId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeploymentValidationError{
				field:  "ApplicationInstanceId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeploymentValidationError is the validation error returned by
// Deployment.Validate if the designated constraints aren't met.
type DeploymentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeploymentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeploymentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeploymentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeploymentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeploymentValidationError) ErrorName() string { return "DeploymentValidationError" }

// Error satisfies the builtin error interface
func (e DeploymentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeployment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeploymentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeploymentValidationError{}

// Validate checks the field values on CreateDeploymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateDeploymentRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDeploymentRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateDeploymentRequestValidationError is the validation error returned by
// CreateDeploymentRequest.Validate if the designated constraints aren't met.
type CreateDeploymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDeploymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDeploymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDeploymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDeploymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDeploymentRequestValidationError) ErrorName() string {
	return "CreateDeploymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDeploymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDeploymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDeploymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDeploymentRequestValidationError{}

// Validate checks the field values on CreateDeploymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateDeploymentResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDeploymentResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateDeploymentResponseValidationError is the validation error returned by
// CreateDeploymentResponse.Validate if the designated constraints aren't met.
type CreateDeploymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDeploymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDeploymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDeploymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDeploymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDeploymentResponseValidationError) ErrorName() string {
	return "CreateDeploymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDeploymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDeploymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDeploymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDeploymentResponseValidationError{}

// Validate checks the field values on ReadDeploymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadDeploymentRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadDeploymentRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadDeploymentRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadDeploymentRequestValidationError is the validation error returned by
// ReadDeploymentRequest.Validate if the designated constraints aren't met.
type ReadDeploymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadDeploymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadDeploymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadDeploymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadDeploymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadDeploymentRequestValidationError) ErrorName() string {
	return "ReadDeploymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadDeploymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadDeploymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadDeploymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadDeploymentRequestValidationError{}

// Validate checks the field values on ReadDeploymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadDeploymentResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadDeploymentResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadDeploymentResponseValidationError is the validation error returned by
// ReadDeploymentResponse.Validate if the designated constraints aren't met.
type ReadDeploymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadDeploymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadDeploymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadDeploymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadDeploymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadDeploymentResponseValidationError) ErrorName() string {
	return "ReadDeploymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadDeploymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadDeploymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadDeploymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadDeploymentResponseValidationError{}

// Validate checks the field values on UpdateDeploymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateDeploymentRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDeploymentRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDeploymentRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateDeploymentRequestValidationError is the validation error returned by
// UpdateDeploymentRequest.Validate if the designated constraints aren't met.
type UpdateDeploymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDeploymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDeploymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDeploymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDeploymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDeploymentRequestValidationError) ErrorName() string {
	return "UpdateDeploymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDeploymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDeploymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDeploymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDeploymentRequestValidationError{}

// Validate checks the field values on UpdateDeploymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateDeploymentResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDeploymentResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateDeploymentResponseValidationError is the validation error returned by
// UpdateDeploymentResponse.Validate if the designated constraints aren't met.
type UpdateDeploymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDeploymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDeploymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDeploymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDeploymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDeploymentResponseValidationError) ErrorName() string {
	return "UpdateDeploymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDeploymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDeploymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDeploymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDeploymentResponseValidationError{}

// Validate checks the field values on DeleteDeploymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteDeploymentRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteDeploymentRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeleteDeploymentRequestValidationError is the validation error returned by
// DeleteDeploymentRequest.Validate if the designated constraints aren't met.
type DeleteDeploymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDeploymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDeploymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDeploymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDeploymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDeploymentRequestValidationError) ErrorName() string {
	return "DeleteDeploymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDeploymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDeploymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDeploymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDeploymentRequestValidationError{}

// Validate checks the field values on DeleteDeploymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteDeploymentResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteDeploymentResponseValidationError is the validation error returned by
// DeleteDeploymentResponse.Validate if the designated constraints aren't met.
type DeleteDeploymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDeploymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDeploymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDeploymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDeploymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDeploymentResponseValidationError) ErrorName() string {
	return "DeleteDeploymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDeploymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDeploymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDeploymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDeploymentResponseValidationError{}

// Validate checks the field values on ListDeploymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListDeploymentRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDeploymentRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOrderBy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDeploymentRequestValidationError{
				field:  "OrderBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDeploymentRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDeploymentRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListDeploymentRequestValidationError is the validation error returned by
// ListDeploymentRequest.Validate if the designated constraints aren't met.
type ListDeploymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeploymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeploymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeploymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeploymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeploymentRequestValidationError) ErrorName() string {
	return "ListDeploymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeploymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeploymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeploymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeploymentRequestValidationError{}

// Validate checks the field values on ListDeploymentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListDeploymentsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDeploymentsResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDeploymentsResponseValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListDeploymentsResponseValidationError is the validation error returned by
// ListDeploymentsResponse.Validate if the designated constraints aren't met.
type ListDeploymentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeploymentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeploymentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeploymentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeploymentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeploymentsResponseValidationError) ErrorName() string {
	return "ListDeploymentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeploymentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeploymentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeploymentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeploymentsResponseValidationError{}

// Validate checks the field values on ManifestCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ManifestCreateRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetAppInstanceId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ManifestCreateRequestValidationError{
				field:  "AppInstanceId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for LifecycleSkipValues

	// no validation rules for EnvSkipValues

	return nil
}

// ManifestCreateRequestValidationError is the validation error returned by
// ManifestCreateRequest.Validate if the designated constraints aren't met.
type ManifestCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ManifestCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ManifestCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ManifestCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ManifestCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ManifestCreateRequestValidationError) ErrorName() string {
	return "ManifestCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ManifestCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sManifestCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ManifestCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ManifestCreateRequestValidationError{}

// Validate checks the field values on ManifestCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ManifestCreateResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Artifact

	return nil
}

// ManifestCreateResponseValidationError is the validation error returned by
// ManifestCreateResponse.Validate if the designated constraints aren't met.
type ManifestCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ManifestCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ManifestCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ManifestCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ManifestCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ManifestCreateResponseValidationError) ErrorName() string {
	return "ManifestCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ManifestCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sManifestCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ManifestCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ManifestCreateResponseValidationError{}

// Validate checks the field values on ManifestConfigCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ManifestConfigCreateRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetAppInstanceId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ManifestConfigCreateRequestValidationError{
				field:  "AppInstanceId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for LifecycleSkipValues

	// no validation rules for EnvSkipValues

	return nil
}

// ManifestConfigCreateRequestValidationError is the validation error returned
// by ManifestConfigCreateRequest.Validate if the designated constraints
// aren't met.
type ManifestConfigCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ManifestConfigCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ManifestConfigCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ManifestConfigCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ManifestConfigCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ManifestConfigCreateRequestValidationError) ErrorName() string {
	return "ManifestConfigCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ManifestConfigCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sManifestConfigCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ManifestConfigCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ManifestConfigCreateRequestValidationError{}

// Validate checks the field values on ManifestConfigCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ManifestConfigCreateResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Config

	return nil
}

// ManifestConfigCreateResponseValidationError is the validation error returned
// by ManifestConfigCreateResponse.Validate if the designated constraints
// aren't met.
type ManifestConfigCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ManifestConfigCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ManifestConfigCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ManifestConfigCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ManifestConfigCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ManifestConfigCreateResponseValidationError) ErrorName() string {
	return "ManifestConfigCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ManifestConfigCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sManifestConfigCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ManifestConfigCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ManifestConfigCreateResponseValidationError{}
