{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CMDB Docs \u00b6 CMDB Data Model \u00b6 The process of designing the data model for the CMDB application could be iterative and maybe use visual tools. I created a sample ./model directory here with a make target for generating ERD: make erd Create file://doc/db/out.html and file://doc/db/out.pdf Which creates targets e.g. cmdb ERD that you can view. We can now start to design the proto definiton of our data model using the above model defintion for the messsage and service definitions. Refer to the proto buff defintion for database defintion which is layered on top of Gorm . We would build out the data model incrementaly starting with the top node in our case the Region. Then add the necessary migration for it, see below for more detail on database migration below. Once the database was completed I created an ERD using LucidChart import feature and generated a more complete ERD, this process is tedious so not something for fast iterative process. There are two ERDs one for the data model to drive Application configuration based on Helm Charts . The other is geared toward the Application Deployment model based on Kubernetes . Note you could start with ERD diagram, but there is not an easy way to go from ERD to create the protobuf definition right now.","title":"Home"},{"location":"#cmdb-docs","text":"","title":"CMDB Docs"},{"location":"#cmdb-data-model","text":"The process of designing the data model for the CMDB application could be iterative and maybe use visual tools. I created a sample ./model directory here with a make target for generating ERD: make erd Create file://doc/db/out.html and file://doc/db/out.pdf Which creates targets e.g. cmdb ERD that you can view. We can now start to design the proto definiton of our data model using the above model defintion for the messsage and service definitions. Refer to the proto buff defintion for database defintion which is layered on top of Gorm . We would build out the data model incrementaly starting with the top node in our case the Region. Then add the necessary migration for it, see below for more detail on database migration below. Once the database was completed I created an ERD using LucidChart import feature and generated a more complete ERD, this process is tedious so not something for fast iterative process. There are two ERDs one for the data model to drive Application configuration based on Helm Charts . The other is geared toward the Application Deployment model based on Kubernetes . Note you could start with ERD diagram, but there is not an easy way to go from ERD to create the protobuf definition right now.","title":"CMDB Data Model"},{"location":"app_model/","text":"%%{init: {'theme': 'base', 'themeVariables': { 'primaryColor': '#fffcbb', 'fontFamily': 'aerial', 'fontSize': '50px', 'lineColor': '#ff0000', 'primaryBorderColor': '#ff0000'}}}%% erDiagram APP }o--|| OWNER : \"has\" APP ||--|| DOC : \"publish\" APP ||--|| NAMESPACE : \"has\" APP ||--|| API : \"publish\" APP ||--o{ API : \"consume\" APP ||--|| REPO : \"use\" APP }o--o{ SYNTHETIC : \"monitor\"","title":"AppModel"},{"location":"diagrams/","text":"References \u00b6 How to get diagrams in MkDocs How to setup MkDocs on Mac and Github Mermaid Mermaid2 plugin Mermaid Live Editor Mermaid Diagram Syntax Class or UML \u00b6 Class Diagram: The different cardinality options are: Value Meaning 1 Exactly one 0..1 Zero or one 1..* One or more (no upper limit) 0..n Zero to n 1..n One to n * Many n n classDiagram CloudProvider \"1\" --> \"*\" Region Region \"1\" --> \"1..*\" Network Network \"1\" --> \"*\" KubeCluster KubeCluster \"1\" --> \"*\" Deployment Application \"1\" --> \"1..*\" AppInstance Application \"1\" --> \"1..*\" ChartVersion AppInstance \"1\" --> \"1\" ChartVersion AppInstance \"1\" --> \"1\" Deployment ER Diagram: Value (left) Value (right) Meaning |o o| Zero or one || || Exactly one }o o{ Zero or more (no upper limit) }| |{ One or more (no upper limit) erDiagram CloudProvider { string account } CloudProvider ||--|{ Region : \"\" Region ||--o{ Network : \"\" Network ||--o{ KubeCluster : \"\" KubeCluster ||--o{ Deployment : \"\" Application ||--o{ AppInstance : \"\" Application ||--o{ ChartVersion : \"\" AppInstance ||--|| ChartVersion : \"\" AppInstance ||--|| Deployment : \"\" Graph or Flowchart \u00b6 graph LR A((Client)) --> B[Load Balancer] B --> C[Server01] --> E[Application1] & F[Application2] B --> D[Server02] --> G[(Database)] graph TB A((Start)) --o B subgraph stage one B[Do Something] --> C{Did it work?} C -- No --> B end C -- Yes --> D[Do more!] subgraph stage two D --> E{Are we done?} E -- No --> B E -- Yes --> F[Finish up] end F ----x G((Stop)) Sequence Diagram \u00b6 Simple... sequenceDiagram Alice->>John: Hello John, how are you? John-->>Alice: Great! Alice-)John: See you later! Complex.... %% Example of sequence diagram sequenceDiagram Alice->>Bob: Hello Bob, how are you? alt is sick Bob->>Alice: Not so good :( else is well Bob->>Alice: Feeling fresh like a daisy end opt Extra response Bob->>Alice: Thanks for asking end More Complex.... sequenceDiagram autonumber rect rgb(0, 255, 0) par Alice to Bob Alice->>Bob: Hello Bob, how are you? and Alice to John Alice->>John: Hello John, how are you? rect rgba(0, 0, 255, .3) par John to Jane Note over John: Note we embed another parallel here John->>John: Should I tell Jane? John->>Jane: Alice called me! John->>Alice: I'm doing good end end and Alice to Jane Alice->>Jane: Hello Jane, how are you? end end Journey \u00b6 journey title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 5: Me Gantt Chart \u00b6 gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid excludes weekends %% (`excludes` accepts specific dates in YYYY-MM-DD format, days of the week (\"sunday\") or \"weekends\", but not the word \"weekdays\".) section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d section Documentation Describe gantt syntax :active, a1, after des1, 3d Add gantt diagram to demo page :after a1 , 20h Add another diagram to demo page :doc1, after a1 , 48h section Last section Describe gantt syntax :after doc1, 3d Add gantt diagram to demo page :20h Add another diagram to demo page :48h Pie Chart \u00b6 pie title Key elements in Product X \"Calcium\" : 42.96 \"Potassium\" : 50.05 \"Magnesium\" : 10.01 \"Iron\" : 5","title":"Diagrams"},{"location":"diagrams/#references","text":"How to get diagrams in MkDocs How to setup MkDocs on Mac and Github Mermaid Mermaid2 plugin Mermaid Live Editor Mermaid Diagram Syntax","title":"References"},{"location":"diagrams/#class-or-uml","text":"Class Diagram: The different cardinality options are: Value Meaning 1 Exactly one 0..1 Zero or one 1..* One or more (no upper limit) 0..n Zero to n 1..n One to n * Many n n classDiagram CloudProvider \"1\" --> \"*\" Region Region \"1\" --> \"1..*\" Network Network \"1\" --> \"*\" KubeCluster KubeCluster \"1\" --> \"*\" Deployment Application \"1\" --> \"1..*\" AppInstance Application \"1\" --> \"1..*\" ChartVersion AppInstance \"1\" --> \"1\" ChartVersion AppInstance \"1\" --> \"1\" Deployment ER Diagram: Value (left) Value (right) Meaning |o o| Zero or one || || Exactly one }o o{ Zero or more (no upper limit) }| |{ One or more (no upper limit) erDiagram CloudProvider { string account } CloudProvider ||--|{ Region : \"\" Region ||--o{ Network : \"\" Network ||--o{ KubeCluster : \"\" KubeCluster ||--o{ Deployment : \"\" Application ||--o{ AppInstance : \"\" Application ||--o{ ChartVersion : \"\" AppInstance ||--|| ChartVersion : \"\" AppInstance ||--|| Deployment : \"\"","title":"Class or UML"},{"location":"diagrams/#graph-or-flowchart","text":"graph LR A((Client)) --> B[Load Balancer] B --> C[Server01] --> E[Application1] & F[Application2] B --> D[Server02] --> G[(Database)] graph TB A((Start)) --o B subgraph stage one B[Do Something] --> C{Did it work?} C -- No --> B end C -- Yes --> D[Do more!] subgraph stage two D --> E{Are we done?} E -- No --> B E -- Yes --> F[Finish up] end F ----x G((Stop))","title":"Graph or Flowchart"},{"location":"diagrams/#sequence-diagram","text":"Simple... sequenceDiagram Alice->>John: Hello John, how are you? John-->>Alice: Great! Alice-)John: See you later! Complex.... %% Example of sequence diagram sequenceDiagram Alice->>Bob: Hello Bob, how are you? alt is sick Bob->>Alice: Not so good :( else is well Bob->>Alice: Feeling fresh like a daisy end opt Extra response Bob->>Alice: Thanks for asking end More Complex.... sequenceDiagram autonumber rect rgb(0, 255, 0) par Alice to Bob Alice->>Bob: Hello Bob, how are you? and Alice to John Alice->>John: Hello John, how are you? rect rgba(0, 0, 255, .3) par John to Jane Note over John: Note we embed another parallel here John->>John: Should I tell Jane? John->>Jane: Alice called me! John->>Alice: I'm doing good end end and Alice to Jane Alice->>Jane: Hello Jane, how are you? end end","title":"Sequence Diagram"},{"location":"diagrams/#journey","text":"journey title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 5: Me","title":"Journey"},{"location":"diagrams/#gantt-chart","text":"gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid excludes weekends %% (`excludes` accepts specific dates in YYYY-MM-DD format, days of the week (\"sunday\") or \"weekends\", but not the word \"weekdays\".) section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d section Documentation Describe gantt syntax :active, a1, after des1, 3d Add gantt diagram to demo page :after a1 , 20h Add another diagram to demo page :doc1, after a1 , 48h section Last section Describe gantt syntax :after doc1, 3d Add gantt diagram to demo page :20h Add another diagram to demo page :48h","title":"Gantt Chart"},{"location":"diagrams/#pie-chart","text":"pie title Key elements in Product X \"Calcium\" : 42.96 \"Potassium\" : 50.05 \"Magnesium\" : 10.01 \"Iron\" : 5","title":"Pie Chart"},{"location":"model/","text":"%%{init: {'theme': 'base', 'themeVariables': { 'primaryColor': '#fffcbb', 'fontFamily': 'aerial', 'fontSize': '50px', 'lineColor': '#ff0000', 'primaryBorderColor': '#ff0000'}}}%% erDiagram AppCollection ||--o{ ChartVersion : \"\" AppCollection ||--o{ AppCollection : \"\" AppCollection ||--o{ AppInstance : \"\" AppInstance ||--o{ Deployment : \"\" AppInstance ||--o{ Resource : \"\" App ||--o{ AppConfig : \"\" App ||--o{ AppInstance : \"\" App ||--o{ AppVersion : \"\" App ||--o{ ChartVersion : \"\" Artifact ||--o{ Deployment : \"\" ChartVersion ||--o{ AppInstance : \"\" ChartVersion ||--o{ AppVersion : \"\" ChartVersion ||--o{ Artifact : \"\" CloudProvider ||--|{ Account : \"\" Account ||--o{ Region : \"\" Environment ||--o{ AppCollection : \"\" Environment ||--o{ AppConfig : \"\" Environment ||--o{ AppInstance : \"\" Environment ||--o{ AppVersion : \"\" KubeCluster ||--o{ Deployment : \"\" Lifecycle ||--o{ AppCollection : \"\" Lifecycle ||--o{ AppConfig : \"\" Lifecycle ||--o{ AppVersion : \"\" Lifecycle ||--o{ Environment : \"\" Lifecycle ||--o| Lifecycle : \"\" Network ||--o{ KubeCluster : \"\" Region ||--o{ Network : \"\"","title":"Model"}]}