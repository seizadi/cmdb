---
# Source: cmdb/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: RELEASE-NAME-cmdb
  labels:
    helm.sh/chart: cmdb-0.2.0
    app.kubernetes.io/name: cmdb
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "seizadi-dev-2a806d8-unsupported"
    app.kubernetes.io/managed-by: Helm
---
# Source: cmdb/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: RELEASE-NAME-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.4.5
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
  namespace: default
type: Opaque
data:
  postgresql-password: "cG9zdGdyZXM="
---
# Source: cmdb/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-postgresql-headless
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.4.5
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  namespace: default
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: RELEASE-NAME
---
# Source: cmdb/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.4.5
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
  annotations:
  namespace: default
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: RELEASE-NAME
    role: primary
---
# Source: cmdb/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: RELEASE-NAME-cmdb
  labels:
    helm.sh/chart: cmdb-0.2.0
    app.kubernetes.io/name: cmdb
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "seizadi-dev-2a806d8-unsupported"
    app.kubernetes.io/managed-by: Helm
spec:
  type: NodePort
  ports:
    - port: 
      targetPort: http
      protocol: TCP
      name: http
    - port: 9090
      protocol: TCP
      name: grpc
      nodePort: 30090
    - port: 8080
      protocol: TCP
      name: http
      nodePort: 30080
  selector:
    app.kubernetes.io/name: cmdb
    app.kubernetes.io/instance: RELEASE-NAME
---
# Source: cmdb/templates/migration.yaml
apiVersion: v1
kind: Pod
metadata:
  name: RELEASE-NAME-cmdb-migrate
  labels:
    app: cmdb
    chart: cmdb-0.2.0
    release: RELEASE-NAME
    heritage: Helm
spec:
  restartPolicy: Never
  initContainers:
    - name: init-container1
      image: "soheileizadi/cmdb-server:seizadi-dev-2a806d8-unsupported"
      imagePullPolicy: IfNotPresent
      volumeMounts:
        - mountPath: "/cmdb-migrations"
          name: migrations
      command:
        - "cp"
        - "-r"
        - "/db/migrations"
        - "/cmdb-migrations"
    - name: init-database
      image: busybox
      command: ['sh', '-c', 'until nslookup RELEASE-NAME-cmdb; do echo waiting for cmdb database; sleep 10; done;']
  containers:
  - name: migration
    env:
    - name: DATABASE_ADDRESS
      valueFrom:
        configMapKeyRef:
          name: RELEASE-NAME-cmdb
          key: CMDB_DATABASE_HOST
    - name: DATABASE_NAME
      valueFrom:
        configMapKeyRef:
          name: RELEASE-NAME-cmdb
          key: CMDB_DATABASE_NAME
    - name: DATABASE_USER
      valueFrom:
        configMapKeyRef:
          name: RELEASE-NAME-cmdb
          key: CMDB_DATABASE_USER
    - name: DATABASE_PASSWORD
      valueFrom:
        secretKeyRef:
          name: RELEASE-NAME-cmdb
          key: postgresql-password
    - name: CONFIG_FILE
      value: defaults
    image: infoblox/migrate:v1.0.0
    imagePullPolicy: Always
    volumeMounts:
      - mountPath: /cmdb-migrations
        name: migrations
    command:
      - /migrate
    args:
      - "--verbose"
      - "--source"
      - "file:///cmdb-migrations/migrations"
      - up
      # to get to a particular level append following
      #- "2"
  volumes:
    - name: migrations
      emptyDir: {}
---
# Source: cmdb/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: RELEASE-NAME-cmdb
  labels:
    helm.sh/chart: cmdb-0.2.0
    app.kubernetes.io/name: cmdb
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "seizadi-dev-2a806d8-unsupported"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: cmdb
      app.kubernetes.io/instance: RELEASE-NAME
  template:
    metadata:
      labels:
        app.kubernetes.io/name: cmdb
        app.kubernetes.io/instance: RELEASE-NAME
    spec:
      serviceAccountName: RELEASE-NAME-cmdb
      securityContext:
        {}
      initContainers:
        - name: init-database
          image: busybox
          command: ['sh', '-c', 'until nslookup RELEASE-NAME-cmdb; do echo waiting for cmdb database; sleep 10; done;']
      containers:
        - name: cmdb
          securityContext:
            {}
          image: "soheileizadi/cmdb-server:seizadi-dev-2a806d8-unsupported"
          imagePullPolicy: IfNotPresent
          env:
          - name: "CMDB_LOGGING_LEVEL"
            value: error
          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8081
              protocol: TCP
            - containerPort: 9090
              name: grpc
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 10
          readinessProbe:
            httpGet:
              path: /ready
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 10
          resources:
            {}
---
# Source: cmdb/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: RELEASE-NAME-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.4.5
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
  namespace: default
spec:
  serviceName: RELEASE-NAME-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: RELEASE-NAME
      role: primary
  template:
    metadata:
      name: RELEASE-NAME-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-10.4.5
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/managed-by: Helm
        role: primary
        app.kubernetes.io/component: primary
    spec:      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: RELEASE-NAME
                    app.kubernetes.io/component: primary
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      containers:
        - name: RELEASE-NAME-postgresql
          image: docker.io/bitnami/postgresql:11.12.0-debian-10-r1
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: RELEASE-NAME-postgresql
                  key: postgresql-password
            - name: POSTGRES_DB
              value: "cmdb"
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -d "dbname=cmdb" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -d "dbname=cmdb" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath: 
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: cmdb/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: RELEASE-NAME-cmdb
  labels:
    helm.sh/chart: cmdb-0.2.0
    app.kubernetes.io/name: cmdb
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: "seizadi-dev-2a806d8-unsupported"
    app.kubernetes.io/managed-by: Helm
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /v1
spec:
  rules:
    - host: "minikube"
      http:
        paths:
          - path: /cmdb
            backend:
              service:
                name: RELEASE-NAME-cmdb
                port:
                  number:
